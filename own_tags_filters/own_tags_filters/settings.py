"""
Django settings for own_tags_filters project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k#4xh4t%#zi3s42=dlr0(mb+9x!sboo(^=@2$&py^u^)j^u(o)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['localhost']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #
    'news_maker'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'news_maker.middleware.select_template.SelectTemplate',
]

ROOT_URLCONF = 'own_tags_filters.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'own_tags_filters.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

format_debug_console = '{asctime} {levelname} {message}'
format_warn_console = format_debug_console + ' {pathname}'
format_err_console = format_warn_console + '{exc_info}'
handlers_to_errors = 'to_file_error'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'style': '{',
    'formatters': {
        'to_console_debug': {
            'format': format_debug_console,
            'style': '{',
        },
        'to_console_warning': {
            'format': format_warn_console,
            'style': '{',
        },
        'to_console_err_crit': {
            'format': format_err_console,
            'style': '{'
        },
        'to_general': {
            'format': '{asctime} {levelname} {module}',
            'style': '{',
        },
        'to_errors': {
            'format': format_err_console,
            'style': '{',
        },
        'to_security': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{',
        },
        'to_email': {
            'format': format_warn_console,
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_level_debug': {
            '()': 'own_tags_filters.filters.service.RequireLoggingLevel',
            'level_name': {'DEBUG'}
        },
        'require_level_warning': {
            '()': 'own_tags_filters.filters.service.RequireLoggingLevel',
            'level_name': {'WARNING'}
        },
        'require_level_err_crit': {
            '()': 'own_tags_filters.filters.service.RequireLoggingLevel',
            'level_name': {'ERROR', 'CRITICAL'}
        },
    },
    'handlers': {
        'console_debug': {
            'level': 'DEBUG',
            'filters': ['require_debug_true', 'require_level_debug'],
            'class': 'logging.StreamHandler',
            'formatter': 'to_console_debug'
        },
        'console_warn': {
            'level': 'WARNING',
            'filters': ['require_debug_true', 'require_level_warning'],
            'class': 'logging.StreamHandler',
            'formatter': 'to_console_warning'
        },
        'console_error': {
            'level': 'ERROR',
            'filters': ['require_debug_true', 'require_level_err_crit'],
            'class': 'logging.StreamHandler',
            'formatter': 'to_console_err_crit'
        },
        'to_file_general_all': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'to_general',
        },
        handlers_to_errors: {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'to_errors',
        },
        'to_file_security': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'to_security',
        },
        'to_email': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'to_email',
        },

    },
    'loggers': {
        'django': {
            'level': 'DEBUG',
            'handlers': ['console_debug',
                         'console_warn',
                         'console_error',
                         'console_critical',
                         'to_file_general_all'],
            'propagate': True,
        },
        'django.request': {
            'level': 'ERROR',
            'handlers': [handlers_to_errors,
                         'to_email'],
            'propagate': False,
        },
        'django.server': {
            'level': 'ERROR',
            'handlers': [handlers_to_errors,
                         'to_email'],
            'propagate': False,
        },
        'django.template': {
            'level': 'ERROR',
            'handlers': [handlers_to_errors],
            'propagate': False,
        },
        'django.backends': {
            'level': 'ERROR',
            'handlers': [handlers_to_errors],
            'propagate': False,
        },
        'django.security': {
            'level': 'INFO',
            'handlers': ['to_file_security'],
            'propagate': False,
        },
    }
}
